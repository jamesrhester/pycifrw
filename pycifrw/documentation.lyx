#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman palatino
\font_sans helvet
\font_typewriter courier
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 0
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\rightmargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Programming with PyCIFRW and PySTARRW
\end_layout

\begin_layout Standard
PyCIFRW provides facilities for reading, manipulating and writing CIF and
 STAR files.
 In addition, CIF files and dictionaries may be validated against DDL1/2
 dictionaries.
 
\end_layout

\begin_layout Section
Installing and Initialising PyCIFRW
\end_layout

\begin_layout Standard
As of version 3.3, it is sufficient to install the PyCIFRW 
\begin_inset Quotes eld
\end_inset

egg
\begin_inset Quotes erd
\end_inset

 if you have the Python 
\begin_inset Quotes eld
\end_inset

Easy Install
\begin_inset Quotes erd
\end_inset

 system.
 In this case, running the command '
\family typewriter
easy_install pycifrw-version.egg
\family default
' will be sufficient.
 See the PyCIFRW web page for the most up-to-date instructions.
\end_layout

\begin_layout Standard
The more traditional approach: assuming python is installed, you can unpack
 the distribution into a temporary directory, and then type 
\begin_inset Quotes eld
\end_inset


\family typewriter
python setup.py
\family default
 
\family typewriter
install
\family default

\begin_inset Quotes erd
\end_inset

 from within this temporary directory.
 Upon completion of this command, a number of files will have been placed
 into the system python packages directory: 
\family typewriter
CifFile.py
\family default
, 
\family typewriter
StarFile.py, yapps_compiled_rt.py
\family default
 and 
\family typewriter
YappsStarParser_xx.py
\family default
.
 It is then sufficient to import 
\family typewriter
CifFile.py
\family default
 into your python session or script to access all PyCIFRW functionality:
 
\end_layout

\begin_layout LyX-Code
>>> import CifFile
\end_layout

\begin_layout Section
Working with CIF files
\end_layout

\begin_layout Subsection
Creating a CifFile object
\end_layout

\begin_layout Standard
CIF files are represented in PyCIFRW as 
\family typewriter
CifFile
\family default
 objects.
 These objects behave identically to Python dictionaries, with some additional
 methods.
 
\family typewriter
CifFile
\family default
 objects can be created by calling the 
\family typewriter
ReadCif
\family default
 function on a filename or URL:
\end_layout

\begin_layout LyX-Code
>>> cf = CifFile.ReadCif("mycif.cif")
\end_layout

\begin_layout LyX-Code
>>> df = CifFile.ReadCif("ftp://ftp.iucr.org/pub/cifdics/cifdic.register")
\end_layout

\begin_layout Standard
Errors are raised if CIF syntax/grammar violations are encountered in the
 input file or line length limits are exceeded.
\end_layout

\begin_layout Standard
A compiled extension (
\family typewriter
StarScan.so
\family default
) is available on Linux which increases parsing speed by a factor of three
 or more.
 To use this facility, include the keyword argument 
\family typewriter
scantype='flex'
\family default
 in 
\family typewriter
ReadCif
\family default
/
\family typewriter
ReadStar
\family default
 commands:
\end_layout

\begin_layout LyX-Code
cf = CifFile.ReadCif("mycif.cif",scantype="flex")
\end_layout

\begin_layout Subsubsection
Grammar options
\end_layout

\begin_layout Standard
There are two slightly different variations in CIF file syntax.
 An early version of the standard allowed non-quoted data strings to begin
 with bracket characters (e.g.
 '
\family typewriter
(
\family default
').
 This was disallowed in version 1.1 in order to reserve such usage for the
 upcoming DDLm changes.
 A very few CIF files are produced according to the old standard.
 Specification of the particular version to use is possible with the 
\family typewriter
grammar
\family default
 keyword:
\end_layout

\begin_layout LyX-Code
cf = CifFile.ReadCif('oldcif.cif',grammar='1.0') #oldest CIF syntax 
\end_layout

\begin_layout LyX-Code
cf = CifFile.ReadCif('normcif.cif',grammar='1.1') #current standard (default)
\end_layout

\begin_layout LyX-Code
cf = CifFile.ReadCif('future.cif',grammar='DDLm') #proposed standard
\end_layout

\begin_layout Standard
Note that the DDLm syntax has not been finalised and is subject to change.
 The most important syntactical addition in DDLm is the use of nested, bracketed
 tuple and list expressions, as in Python.
 The current implementation in PyCIFRW is one interpretation of the draft
 documentation, and is 
\shape italic
likely to change
\shape default
 as the draft is finalised.
\end_layout

\begin_layout Subsubsection
Creating a new CifFile
\end_layout

\begin_layout Standard
A new 
\family typewriter
CifFile
\family default
 object is usually created empty:
\end_layout

\begin_layout LyX-Code
cf = CifFile.CifFile()
\end_layout

\begin_layout Standard
You will need to create at least one 
\family typewriter
CifBlock
\family default
 object to hold your data:
\end_layout

\begin_layout LyX-Code
myblock = CifFile.CifBlock()
\end_layout

\begin_layout LyX-Code
cf['a_block'] = myblock
\end_layout

\begin_layout Standard
A 
\family typewriter
CifBlock
\family default
 object may be initialised with another 
\family typewriter
CifBlock
\family default
, in which case a copy operation is performed, or with a tuple or list of
 tuples containing key, value pairs.
 These are inserted into the new 
\family typewriter
CifBlock
\family default
 using 
\family typewriter
AddCifItem
\family default
 (see below).
\end_layout

\begin_layout Subsection
Manipulating values in a CIF file
\end_layout

\begin_layout Subsubsection
Accessing data
\end_layout

\begin_layout Standard
The simplest form of access is using standard Python square bracket notation.
 Data blocks and data names within each data block are referenced identically
 to normal Python dictionaries:
\end_layout

\begin_layout LyX-Code
my_data = cf['a_data_block']['_a_data_name']
\end_layout

\begin_layout Standard
All values are strings with CIF syntactical elements stripped
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
This deviates from the current CIF standard, which mandates interpreting
 unquoted strings as numbers where possible and in the absence of dictionary
 definitions to the contrary (International Tables, Vol.
 G., p24).
\end_layout

\end_inset

, that is, no enclosing quotation marks or semicolons are included in the
 values.
 The value associated with a 
\family typewriter
CifFile
\family default
 dictionary key is always a 
\family typewriter
CifBlock
\family default
 object.
 All standard Python dictionary methods (e.g.
 
\family typewriter
get, update, items, keys
\family default
) are available for both 
\family typewriter
CifFile
\family default
 and 
\family typewriter
CifBlock
\family default
 objects.
 Note also the convenience method 
\family typewriter
first_block
\family default
, which will reference the first datablock in a CIF file:
\end_layout

\begin_layout LyX-Code
my_data = cf.first_block()
\end_layout

\begin_layout Standard
If a data name occurs in a loop, a list of string values is returned for
 the value of that dataname - the next section describes ways to access
 looped data.
\end_layout

\begin_layout Subsubsection
Tabular (
\begin_inset Quotes eld
\end_inset

looped
\begin_inset Quotes erd
\end_inset

) data
\end_layout

\begin_layout Standard
For the purpose of the following examples, we use the following example
 CIF file:
\end_layout

\begin_layout LyX-Code
data_testblock
\end_layout

\begin_layout LyX-Code
loop_
\end_layout

\begin_layout LyX-Code
  _item_5   
\end_layout

\begin_layout LyX-Code
  _item_7   
\end_layout

\begin_layout LyX-Code
  _item_6    
\end_layout

\begin_layout LyX-Code
  1  a  5    
\end_layout

\begin_layout LyX-Code
  2  b  6    
\end_layout

\begin_layout LyX-Code
  3  c  7    
\end_layout

\begin_layout LyX-Code
  4  d  8 
\end_layout

\begin_layout Standard
PyCIFRW provides a shortcut to return all values taken by a particular dataname
 inside a CIF loop (by using the square bracket notation, identically to
 non-looped data), but more flexibility is provided by accessing 
\family typewriter
CifLoopBlock
\family default
 objects.
\end_layout

\begin_layout Standard
A 
\family typewriter
CifLoopBlock
\family default
 object can be obtained by callin
\family typewriter
g CifBlock
\family default
 method 
\family typewriter
GetLoop(dataname
\family default
).
 This object provides the same methods as a 
\family typewriter
CifBlock
\family default
.
 For example, 
\family typewriter
keys()
\family default
 returns a list of datanames in the loop.
 Additionally, loop packets can be accessed by accessing the nth value in
 the 
\family typewriter
CifLoopBlock
\family default
 object
\begin_inset Foot
status open

\begin_layout Plain Layout

\series bold
Warning
\series default
: 
\shape italic
row and column order in a CIF loop is arbitrary; while PyCIFRW maintains
 the row order seen in the input file, there is nothing in the CIF standards
 which mandates this behaviour
\shape default
.
\end_layout

\end_inset

, and values can be obtained from these packets as attributes:
\end_layout

\begin_layout LyX-Code
>>> lb = cb.GetLoop("_item_5")
\end_layout

\begin_layout LyX-Code
>>> lb[0]
\end_layout

\begin_layout LyX-Code
['1', 'a', '5']
\end_layout

\begin_layout LyX-Code
>>> lb[0]._item_7
\end_layout

\begin_layout LyX-Code
'a'
\end_layout

\begin_layout Standard
An alternative way of accessing loop data uses Python iterators, allowing
 the following syntax:
\end_layout

\begin_layout LyX-Code
>>> for a in lb: print `a["_item_7"]` 
\end_layout

\begin_layout LyX-Code
'a' 'b' 'c' 'd' 
\end_layout

\begin_layout Standard
Note that in both the above examples the row packet is a copy of the looped
 data, and therefore changes to it will not silently alter the contents
 of the 
\family typewriter
CifFile
\family default
 object, unlike the lists returned when column-based access is used.
\end_layout

\begin_layout Subsubsection
Key-based table row access (from version 3.2)
\end_layout

\begin_layout Standard
Rather than relying on a particular row ordering (remembering that row order
 is not significant in CIF, unlike, for example, XML) or iterating through
 all rows looking for a particular row, it is possible to refer to a particular
 row based on the values taken by a given data item, using the 
\family typewriter
CifLoopBlock
\family default
 
\family typewriter
'GetKeyedPacket'
\family default
 method:
\end_layout

\begin_layout LyX-Code
>>> myrow = lb.GetKeyedPacket('_item_7','c') 
\end_layout

\begin_layout LyX-Code
>>> myrow._item_5
\end_layout

\begin_layout LyX-Code
'3'
\end_layout

\begin_layout Standard
In this example, the first packet with a value of '
\family typewriter
c
\family default
' for 
\family typewriter
_item_7
\family default
 is returned, and packet values can then be accessed using the dataname
 as an attribute of the packet.
 Note that a 
\family typewriter
KeyError
\family default
 is raised if more than one packet matches, or no packets match, and that
 the packet returned is a copy of the data read in from the file, and therefore
 can be changed without affecting the 
\family typewriter
CifFile
\family default
 object.
\end_layout

\begin_layout Subsubsection
Changing or adding data values
\end_layout

\begin_layout Standard
If many operations are going to be performed on a single data block, it
 is convenient to assign that block to a new variable:
\end_layout

\begin_layout LyX-Code
cb = cf['my_block']
\end_layout

\begin_layout Standard
A new data name and value may be added, or the value of an existing name
 changed, by straight assignment:
\end_layout

\begin_layout LyX-Code
cb['_new_data_name'] = 4.5
\end_layout

\begin_layout LyX-Code
cb['_old_data_name'] = 'cucumber'
\end_layout

\begin_layout Standard
Old values are overwritten silently.
 Note that values may be strings or numbers.
 As of version 3.6 the string may be Unicode (e.g.
 u'cucumber') as long as only ASCII character points are present.
\end_layout

\begin_layout Standard
If a list is given as the value instead of a single string or number, a
 new loop is created containing this one data name, looped.
 If this data name already appeared in a loop, any looped data values which
 may have co-occurred in the loop are deleted.
 As this is not necessarily the desired behaviour, you may wish to access
 the loop block using the 
\family typewriter
GetLoop
\family default
 method described above.
\end_layout

\begin_layout Standard
Alternatively, the 
\family typewriter
AddCifItem
\family default
 method can be used to add multiple looped and unlooped data items in a
 single command.
 
\family typewriter
AddCifItem
\family default
 is called with a 2-element tuple argument.
 The first element of the tuple is either a single dataname, or a list or
 tuple of datanames.
 The second element is either a single value (in the case of a single name
 in the first element) or a list, each element of which is a list of values
 taken by the corresponding dataname in the first element.
 A nested tuple of datanames in the first element together with the correspondin
g nested tuple of lists in the second element will become a loop block in
 the Cif file.
 In general, however, it will be less confusing if you create a 
\family typewriter
CifLoopBlock
\family default
 object, populate it with data items, and then insert it into a 
\family typewriter
CifBlock
\family default
 object (see below).
\end_layout

\begin_layout Standard
Another method, 
\family typewriter
AddToLoop(dataname,newdata),
\family default
 adds 
\family typewriter
newdata
\family default
 to the pre-existing loop containing 
\family typewriter
dataname
\family default
, silently overwriting duplicate data.
 
\family typewriter
Newdata
\family default
 should be a Python dictionary of dataname - datavalue pairs, where datavalue
 is a list of new/replacement values.
\end_layout

\begin_layout Standard
Note that lists (and other listlike objects except packets) returned by
 PyCIFRW actually point to the list currently inside the 
\family typewriter
CifBlock
\family default
 object, and therefore any modification to them will modify the stored list.
 While this is often the desired behaviour, if you intend to manipulate
 such a list in other parts of your program while preserving the original
 CIF information, you should first copy the list to avoid destroying the
 loop structure:
\end_layout

\begin_layout LyX-Code
mysym = cb['_symmetry_ops'][:]
\end_layout

\begin_layout LyX-Code
mysym.append('x-1/2,y+1/2,z')
\end_layout

\begin_layout Paragraph
Changing item order
\end_layout

\begin_layout Standard
The 
\family typewriter
ChangeItemOrder
\family default
 method allows the order in which data items appear in the printed file
 to be changed:
\end_layout

\begin_layout LyX-Code
mycif['testblock'].ChangeItemOrder('_item_5',0)
\end_layout

\begin_layout Standard
will move 
\family typewriter
_item_5
\family default
 to the beginning of the datablock.
 When changing the order inside a loop block, the loop block's method must
 be called i.e.:
\end_layout

\begin_layout LyX-Code
aloop = mycif['testblock'].GetLoop('_loop_item_1')
\end_layout

\begin_layout LyX-Code
aloop.ChangeItemOrder('_loop_item_1',4)
\end_layout

\begin_layout Standard
Note also that the position of a loop within the file can be changed in
 this way as well, simply by passing the 
\family typewriter
CifLoopBlock
\family default
 object as the first argument:
\end_layout

\begin_layout Standard

\family typewriter
mycif['testblock'].ChangeItemOrder(aloop,0)
\end_layout

\begin_layout Standard
will move the loop block to the beginning of the printed datablock.
\end_layout

\begin_layout Subsubsection
Adding and removing table rows (new in 3.2)
\end_layout

\begin_layout Standard
It is possible to add a new row into a loop using 
\family typewriter
AddPacket(packet)
\family default
:
\end_layout

\begin_layout LyX-Code
template = aloop.GetKeyedPacket('_item_7','d')
\end_layout

\begin_layout LyX-Code
template._item_5 = '5'
\end_layout

\begin_layout LyX-Code
template._item_7 = 'e'
\end_layout

\begin_layout LyX-Code
template._item_6 = '9'
\end_layout

\begin_layout LyX-Code
aloop.AddPacket(template)
\end_layout

\begin_layout Standard
Note we use an existing packet as a template in this example.
 If you wish to create a packet from scratch, you should instantiate a 
\family typewriter
StarPacket
\family default
:
\end_layout

\begin_layout LyX-Code
import StarFile   #installed with PyCIFRW
\end_layout

\begin_layout LyX-Code
newpack = StarFile.StarPacket()
\end_layout

\begin_layout LyX-Code
newpack._item_5 = '5'  
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
aloop.AddPacket(newpack)
\end_layout

\begin_layout Standard
Note that an error will be raised when calling 
\family typewriter
AddPacket
\family default
 if the packet attributes do not exactly match the item names in the loop.
\end_layout

\begin_layout Standard
A packet may be removed using the 
\family typewriter
RemoveKeyedPacket
\family default
 method, which chooses the packet to be removed based on the value of the
 given dataname: 
\end_layout

\begin_layout LyX-Code
aloop.RemoveKeyedPacket('_item_7','a')
\end_layout

\begin_layout Paragraph
Examples using loops
\end_layout

\begin_layout Standard
Note that the above methods are used for adding, accessing and removing
 rows (
\begin_inset Quotes eld
\end_inset

packets
\begin_inset Quotes erd
\end_inset

) in pre-existing loops.
 The following examples show how to perform column-based access.
\end_layout

\begin_layout Subparagraph
Adding/replacing a single item with looped values:
\end_layout

\begin_layout LyX-Code
cb['_symmetry'] = ['x,y,z','-x,-y,-z','x+1/2,y,z']
\end_layout

\begin_layout Standard
results in an output fragment
\end_layout

\begin_layout LyX-Code
loop_
\end_layout

\begin_layout LyX-Code
   _symmetry
\end_layout

\begin_layout LyX-Code
   x,y,z
\end_layout

\begin_layout LyX-Code
   -x,-y,-z
\end_layout

\begin_layout LyX-Code
   x+1/2,y,z
\end_layout

\begin_layout Subparagraph
Adding a complete loop:
\end_layout

\begin_layout LyX-Code
cb.AddCifItem(([['_example','_example_detail']],
\end_layout

\begin_layout LyX-Code
              [[['123.4','4567.8'],
\end_layout

\begin_layout LyX-Code
               ['small cell','large cell']]]))
\end_layout

\begin_layout Standard
results in an output fragment:
\end_layout

\begin_layout LyX-Code
loop_
\end_layout

\begin_layout LyX-Code
   _example
\end_layout

\begin_layout LyX-Code
   _example_detail
\end_layout

\begin_layout LyX-Code
   123.4 'small cell'
\end_layout

\begin_layout LyX-Code
   4567.8 'large cell'
\end_layout

\begin_layout Subparagraph
Appending a new dataname to a pre-existing loop:
\end_layout

\begin_layout LyX-Code
cb.AddToLoop(
\end_layout

\begin_layout LyX-Code
      '_example',{'_comment':["not that small","Big and beautiful"]}
\end_layout

\begin_layout LyX-Code
            )
\end_layout

\begin_layout Standard
changes the previous output to be
\end_layout

\begin_layout LyX-Code
loop_
\end_layout

\begin_layout LyX-Code
   _example
\end_layout

\begin_layout LyX-Code
   _example_detail
\end_layout

\begin_layout LyX-Code
   _comment
\end_layout

\begin_layout LyX-Code
   123.4 'small cell' 'not that small'
\end_layout

\begin_layout LyX-Code
   4567.8 'large cell' 'Big and beautiful'
\end_layout

\begin_layout Subparagraph
Changing pre-existing data in a loop:
\end_layout

\begin_layout LyX-Code
cb.AddToLoop('_comment',{'_example':['12.2','12004']})
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout Standard
changes the previous example to
\end_layout

\begin_layout LyX-Code
loop_
\end_layout

\begin_layout LyX-Code
   _example
\end_layout

\begin_layout LyX-Code
   _example_detail
\end_layout

\begin_layout LyX-Code
   _comment
\end_layout

\begin_layout LyX-Code
   12.2 'small cell' 'not that small'
\end_layout

\begin_layout LyX-Code
   12004 'large cell' 'Big and beautiful'
\end_layout

\begin_layout Subsection
Writing Cif Files
\end_layout

\begin_layout Standard
The 
\family typewriter
CifFile
\family default
 method 
\family typewriter
WriteOut
\family default
 returns a string which may be passed to an open file descriptor:
\end_layout

\begin_layout LyX-Code
>>>outfile = open("mycif.cif")
\end_layout

\begin_layout LyX-Code
>>>outfile.write(cf.WriteOut())
\end_layout

\begin_layout Standard
An alternative method uses the built-in Python 
\family typewriter
str()
\family default
 function:
\end_layout

\begin_layout LyX-Code
>>>outfile.write(str(cf))
\end_layout

\begin_layout Standard

\family typewriter
WriteOut
\family default
 takes an optional argument, 
\family typewriter
comment
\family default
, which should be a string containing a comment which will be placed at
 the top of the output file.
 This comment string must already contain # characters at the beginning
 of lines:
\end_layout

\begin_layout LyX-Code
>>>outfile.write(cf.WriteOut("#This is a test file"))
\end_layout

\begin_layout Standard
Two additional keyword arguments control line length in the output file:
 
\family typewriter
wraplength
\family default
 and 
\family typewriter
maxoutlength
\family default
.
 Lines in the output file are guaranteed to be shorter than 
\family typewriter
maxoutlength
\family default
 characters, and PyCIFRW will additionally insert a line break if putting
 two data values or a dataname/datavalue pair together on the same line
 would exceed 
\family typewriter
wraplength
\family default
.
 In other words, unless data values are longer than 
\family typewriter
maxoutlength
\family default
 characters long, no line breaks will be inserted in the output file.
 By default, 
\family typewriter
wraplength
\family default
 = 80 and 
\family typewriter
maxoutlength
\family default
 = 2048.
\end_layout

\begin_layout Standard
These values may be set on a per block/loop basis by calling the 
\family typewriter
SetOutputLength
\family default
 method of the loop or block.
\end_layout

\begin_layout Standard
The order of output of items within a 
\family typewriter
CifFile
\family default
 or 
\family typewriter
CifBlock
\family default
 is specified using the 
\family typewriter
ChangeItemOrder
\family default
 method (see above).
 The default order is the order that items were inserted or read in to the
 
\family typewriter
CifFile/CifBlock
\family default
.
\end_layout

\begin_layout Section
Dictionaries and Validation
\end_layout

\begin_layout Subsection
Dictionaries
\end_layout

\begin_layout Standard
DDL dictionaries may also be read into 
\family typewriter
CifFile
\family default
 objects.
 For this purpose, 
\family typewriter
CifBlock
\family default
 objects automatically support save frames (used in DDL2 dictionaries),
 which are accessed using the 
\family typewriter
saves
\family default
 key.
 The value of this key is a collection of 
\family typewriter
CifBlock
\family default
 objects indexed by save frame name, and available operations are similar
 to those available for a 
\family typewriter
CifFile
\family default
, which is also a collection of 
\family typewriter
CifBlock
\family default
s.
\end_layout

\begin_layout Standard
A 
\family typewriter
CifDic
\family default
 object hides the difference between DDL1 dictionaries, where all definitions
 are separate data blocks, and DDL2 dictionaries, where all definitions
 are in save frames of a single data block.
 A 
\family typewriter
CifDic
\family default
 is initialised with a single file name or 
\family typewriter
CifFile
\family default
 object, and will accept the 
\family typewriter
grammar
\family default
 keyword:
\end_layout

\begin_layout LyX-Code
cd = CifFile.CifDic("cif_core.dic",grammar='1.1')
\end_layout

\begin_layout Standard
Definitions are accessed using the usual notation, e.g.
 
\family typewriter
cd['_atom_site_aniso_label']
\family default
.
 Return values are always 
\family typewriter
CifBlock
\family default
 objects.
 Additionally, the 
\family typewriter
CifDic
\family default
 object contains a number of instance variables derived from dictionary
 global data:
\end_layout

\begin_layout Description
dicname The dictionary name + version as given in the dictionary 
\end_layout

\begin_layout Description
diclang 'DDL1','DDL2', or 'DDLm'
\end_layout

\begin_layout Description
typedic A Python dictionary matching the typecode to a compiled regular
 expression
\end_layout

\begin_layout Standard

\family typewriter
CifDic
\family default
 objects provide a large number of validation functions, which all return
 a Python dictionary which contains at least the key 
\family typewriter
result
\family default
.
 
\family typewriter
result
\family default
 takes the values 
\family typewriter
True
\family default
, 
\family typewriter
False
\family default
 or 
\family typewriter
None
\family default
 depending on the success, failure or non-applicability of each test.
 In case of failure, additional keys are returned depending on the nature
 of the error.
\end_layout

\begin_layout Subsection
Validation
\end_layout

\begin_layout Standard
A top level function is provided for convenient validation of CIF files:
\end_layout

\begin_layout LyX-Code
CifFile.validate("mycif.cif",dic = "cif_core.dic")
\end_layout

\begin_layout Standard
This returns a tuple 
\family typewriter
(valid_result, no_matches)
\family default
.
 
\family typewriter
valid_result
\family default
 and 
\family typewriter
no_matches
\family default
 are Python dictionaries indexed by block name.
 For 
\family typewriter
valid_result
\family default
, the value for each block is itself a dictionary indexed by 
\family typewriter
item_name
\family default
.
 The value attached to each item name is a list of 
\family typewriter
(check_function, check_result)
\family default
 tuples, with 
\family typewriter
check_result
\family default
 a small dictionary containing at least the key 
\family typewriter
result
\family default
.
 All tests which passed or were not applicable are removed from this dictionary,
 so result is always 
\family typewriter
False
\family default
.
 Additional keys contain auxiliary information depending on the test.
 Each of the items in 
\family typewriter
no_matches
\family default
 is a simple list of item names which were not found in the dictionary.
\end_layout

\begin_layout Standard
If a simple validation report is required, the function 
\family typewriter
validate_report
\family default
 can be called on the output of the above function, printing a simple ASCII
 report.
 This function can be studied as an example of how to process the structure
 returned by the '
\family typewriter
validate
\family default
' function.
\end_layout

\begin_layout Standard
A somewhat nicer interface to validation is provided in the 
\family typewriter
ValidationResult
\family default
 class (thanks to Boris Dusek), which is initialised with the return value
 from 
\family typewriter
validate
\family default
:
\end_layout

\begin_layout LyX-Code
val_report = ValidationResult(validate("mycif.cif",dic="cif_core.dic"))
\end_layout

\begin_layout Standard
This class provides the 
\family typewriter
report
\family default
 method, producing a human-readable report, as well as Boolean methods which
 return whether or not the block is valid or if items appear in the block
 that are not present in the dictionary - 
\family typewriter
is_valid
\family default
 and 
\family typewriter
has_no_match_items
\family default
 respectively.
\end_layout

\begin_layout Subsubsection
Limitations on validation
\end_layout

\begin_layout Enumerate
(DDL2 only) When validating data dictionaries themselves, no checks are
 made on group and subgroup consistency (e.g.
 that a specified subgroup is actually defined).
\end_layout

\begin_layout Enumerate
(DDL1 only) Some 
\family typewriter
_type_construct
\family default
 attributes in the DDL1 spec file are not machine-readable, so values cannot
 be checked for consistency
\end_layout

\begin_layout Subsection
ValidCifFile objects
\end_layout

\begin_layout Standard
A 
\family typewriter
ValidCifFile
\family default
 object behaves identically to a 
\family typewriter
CifFile
\family default
 object with the additional characteristic that it is valid against the
 given dictionary object.
 Any attempt to set a data value, or add or remove a data name, that would
 invalidate the object raises a 
\family typewriter
ValidCifFile
\family default
 error.
 This class is slow, experimental and it is relatively easy to get around
 the validity checks; it is probably more efficient to construct a complete
 file and then run a validity check.
\end_layout

\begin_layout Standard
Additional keywords for initialisation are:
\end_layout

\begin_layout Description
dic A 
\family typewriter
CifDic
\family default
 object to use in validation
\end_layout

\begin_layout Description
diclist A list of 
\family typewriter
CifFile
\family default
 objects or filenames to be merged into a 
\family typewriter
CifDic
\family default
 object (see below)
\end_layout

\begin_layout Description
mergemode Choose merging method (one of '
\family typewriter
strict
\family default
','
\family typewriter
overlay
\family default
', '
\family typewriter
replace
\family default
')
\end_layout

\begin_layout Subsection
Merging dictionaries
\end_layout

\begin_layout Standard
PyCIFRW provides a top-level function to merge DDL1/2 dictionary files.
 It takes a list of CIF filenames or 
\family typewriter
CifFile
\family default
 objects, and a 
\family typewriter
mergemode
\family default
 keyword argument.
 CIF files are merged from left to right, that is, the second file in the
 list is merged into the first file in the list and so on.
\end_layout

\begin_layout Standard
For completeness we list the arguments of the 
\family typewriter
CifFile merge
\family default
 method, which actually performs the merging operation:
\end_layout

\begin_layout Description
new_block_set (first argument, no keyword) The new dictionary to be merged
 into the current dictionary
\end_layout

\begin_layout Description
mode merging mode to use ('
\family typewriter
strict
\family default
', '
\family typewriter
overlay
\family default
' or '
\family typewriter
replace
\family default
')
\end_layout

\begin_layout Description
single_block a two element list 
\family typewriter
[oldblockname, newblockname]
\family default
, where 
\family typewriter
oldblockname
\family default
 in the current file is merged with 
\family typewriter
newblockname
\family default
 in the new file.
 This is useful when blocknames don't match
\end_layout

\begin_layout Description
idblock This block is ignored when merging - useful when merging DDL1 dictionari
es in 
\family typewriter
strict
\family default
 mode, in which case the 
\family typewriter
on_this_dictionary
\family default
 block would cause an error.
\end_layout

\begin_layout Subsubsection
Limitations on merging
\end_layout

\begin_layout Standard
In overlay mode, the COMCIFS recommendations require that, when both definitions
 contain identical unlooped attributes which can be looped, the merging
 process should construct those loops and include both sets of data in the
 new loop.
 
\end_layout

\begin_layout Standard
This is not yet implemented in PyCIFRW, as it involves checking the DDL1/DDL2
 spec to determine which attributes may be looped together.
\end_layout

\begin_layout Section
Working with STAR files
\end_layout

\begin_layout Subsection
Creating STAR files
\end_layout

\begin_layout Standard
Star files are created entirely analogously to CIF files, using the 
\family typewriter
StarFile
\family default
 object or 
\family typewriter
ReadStar
\family default
 function.
\end_layout

\begin_layout Subsection
Manipulating values
\end_layout

\begin_layout Standard
The usual square bracket notation applies, as for 
\family typewriter
CifFile
\family default
 and 
\family typewriter
CifBlock
\family default
 objects.
 
\family typewriter
StarFiles
\family default
 are built out of 
\family typewriter
StarBlock
\family default
 objects in exactly the same way as 
\family typewriter
CifFile
\family default
 objects are built out of 
\family typewriter
CifBlock
\family default
 objects.
 
\family typewriter
StarBlock
\family default
 objects can contain any number of 
\family typewriter
LoopBlock
\family default
 objects, which represent STAR loop blocks.
 Crucially, these 
\family typewriter
LoopBlock
\family default
 objects may contain nested loops, which are also 
\family typewriter
LoopBlock
\family default
 objects.
 Loops are inserted into a 
\family typewriter
LoopBlock
\family default
 by calling the 
\family typewriter
insert_loop
\family default
 method, and may be nested to an arbitrary level.
\end_layout

\begin_layout Subsubsection
Iterators
\end_layout

\begin_layout Standard
Any LoopBlock object has two iterator methods: 
\family typewriter
recursive_iter
\family default
 and 
\family typewriter
flat_iterator
\family default
.
 On each call of the iterator created by a 
\family typewriter
recursive_iter
\family default
 call, a 
\family typewriter
StarList
\family default
 is returned with single-valued attributes corresponding to a single set
 of values.
 If there are multiple trees of nested loops in a 
\family typewriter
LoopBlock
\family default
, each tree is iterated over separately, as there is no reason that looped
 values inside a second loop block would have any relationship with values
 inside a first loop block.
 This iterator will thus return all possible sets of values for the 
\family typewriter
LoopBlock
\family default
.
\end_layout

\begin_layout Standard
The 
\family typewriter
flat_iterator
\family default
 method does not dig down into nested loops.
 Instead, iterators created from it return a new 
\family typewriter
LoopBlock
\family default
 with key-value pairs corresponding to a single top-level packet; nested
 loops are included, but they also have only data corresponding to the selected
 top-level packet available.
 This iterator thus iterates through the top-level packets, collapsing the
 nesting level by one.
\end_layout

\begin_layout Standard
The default iterator (that used in list comprehensions and for loops) for
 
\family typewriter
CifBlocks
\family default
 (as opposed to 
\family typewriter
StarBlocks
\family default
) is 
\family typewriter
recursive_iter
\family default
.
\end_layout

\begin_layout Section
Example programs
\end_layout

\begin_layout Standard
A program which uses PyCIFRW for validation, 
\family typewriter
validate_cif.py
\family default
, is included in the distribution in the Programs subdirectory.
 It will validate a CIF file (including dictionaries) against one or more
 dictionaries which may be specified by name and version or as a filename
 on the local disk.
 If name and version are specified, the IUCr canonical registry or a local
 registry is used to find the dictionary and download it if necessary.
\end_layout

\begin_layout Subsection
Usage
\end_layout

\begin_layout LyX-Code
python validate_cif.py [options] ciffile
\end_layout

\begin_layout Subsection
Options
\end_layout

\begin_layout Description
--version show version number and exit
\end_layout

\begin_layout Description
-h,--help print short help message
\end_layout

\begin_layout Description
-d
\begin_inset space ~
\end_inset

dirname directory to find/store dictionary files
\end_layout

\begin_layout Description
-f
\begin_inset space ~
\end_inset

dictname filename of locally-stored dictionary
\end_layout

\begin_layout Description
-u
\begin_inset space ~
\end_inset

version dictionary version to resolve using registry
\end_layout

\begin_layout Description
-n
\begin_inset space ~
\end_inset

name dictionary name to resolve using registry
\end_layout

\begin_layout Description
-s store downloaded dictionary locally (default True)
\end_layout

\begin_layout Description
-c fetch and use canonical registry from IUCr
\end_layout

\begin_layout Description
-r
\begin_inset space ~
\end_inset

registry location of registry as filename or URL
\end_layout

\begin_layout Description
-t The file to be checked is itself a DDL2 dictionary
\end_layout

\begin_layout Section
Further information
\end_layout

\begin_layout Standard
The source files are in a literate programming format (noweb) with file
 extension .nw.
 HTML documentation generated from these files and containing both code
 and copious comments is included in the downloaded package.
 Details of interpretation of the current standards as relates to validation
 can be found in these files.
\end_layout

\end_body
\end_document
